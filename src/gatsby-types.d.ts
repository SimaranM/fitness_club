/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type AboutJson = Node & {
  readonly absoluteImage: Maybe<Scalars['String']>;
  readonly allButton: Maybe<ReadonlyArray<Maybe<AboutJsonAllButton>>>;
  readonly button: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly desc: Maybe<Scalars['String']>;
  readonly help: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mainImage: Maybe<Scalars['String']>;
  readonly mainTitle: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly phoneNum: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type AboutJsonAllButton = {
  readonly button: Maybe<Scalars['String']>;
};

type AboutJsonAllButtonFieldSelector = {
  readonly button: InputMaybe<FieldSelectorEnum>;
};

type AboutJsonAllButtonFilterInput = {
  readonly button: InputMaybe<StringQueryOperatorInput>;
};

type AboutJsonAllButtonFilterListInput = {
  readonly elemMatch: InputMaybe<AboutJsonAllButtonFilterInput>;
};

type AboutJsonAllButtonSortInput = {
  readonly button: InputMaybe<SortOrderEnum>;
};

type AboutJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutJsonEdge>;
  readonly group: ReadonlyArray<AboutJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutJsonConnection_distinctArgs = {
  field: AboutJsonFieldSelector;
};


type AboutJsonConnection_groupArgs = {
  field: AboutJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutJsonConnection_maxArgs = {
  field: AboutJsonFieldSelector;
};


type AboutJsonConnection_minArgs = {
  field: AboutJsonFieldSelector;
};


type AboutJsonConnection_sumArgs = {
  field: AboutJsonFieldSelector;
};

type AboutJsonEdge = {
  readonly next: Maybe<AboutJson>;
  readonly node: AboutJson;
  readonly previous: Maybe<AboutJson>;
};

type AboutJsonFieldSelector = {
  readonly absoluteImage: InputMaybe<FieldSelectorEnum>;
  readonly allButton: InputMaybe<AboutJsonAllButtonFieldSelector>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly help: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mainImage: InputMaybe<FieldSelectorEnum>;
  readonly mainTitle: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly phoneNum: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type AboutJsonFilterInput = {
  readonly absoluteImage: InputMaybe<StringQueryOperatorInput>;
  readonly allButton: InputMaybe<AboutJsonAllButtonFilterListInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly help: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mainImage: InputMaybe<StringQueryOperatorInput>;
  readonly mainTitle: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly phoneNum: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type AboutJsonFilterListInput = {
  readonly elemMatch: InputMaybe<AboutJsonFilterInput>;
};

type AboutJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<AboutJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<AboutJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<AboutJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type AboutJsonGroupConnection_distinctArgs = {
  field: AboutJsonFieldSelector;
};


type AboutJsonGroupConnection_groupArgs = {
  field: AboutJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type AboutJsonGroupConnection_maxArgs = {
  field: AboutJsonFieldSelector;
};


type AboutJsonGroupConnection_minArgs = {
  field: AboutJsonFieldSelector;
};


type AboutJsonGroupConnection_sumArgs = {
  field: AboutJsonFieldSelector;
};

type AboutJsonSortInput = {
  readonly absoluteImage: InputMaybe<SortOrderEnum>;
  readonly allButton: InputMaybe<AboutJsonAllButtonSortInput>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly help: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mainImage: InputMaybe<SortOrderEnum>;
  readonly mainTitle: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly phoneNum: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type BannerJson = Node & {
  readonly absoluteImage: Maybe<Scalars['String']>;
  readonly allButton: Maybe<ReadonlyArray<Maybe<BannerJsonAllButton>>>;
  readonly button: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly desc: Maybe<Scalars['String']>;
  readonly help: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mainImage: Maybe<Scalars['String']>;
  readonly mainTitle: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly phoneNum: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type BannerJsonAllButton = {
  readonly button: Maybe<Scalars['String']>;
};

type BannerJsonAllButtonFieldSelector = {
  readonly button: InputMaybe<FieldSelectorEnum>;
};

type BannerJsonAllButtonFilterInput = {
  readonly button: InputMaybe<StringQueryOperatorInput>;
};

type BannerJsonAllButtonFilterListInput = {
  readonly elemMatch: InputMaybe<BannerJsonAllButtonFilterInput>;
};

type BannerJsonAllButtonSortInput = {
  readonly button: InputMaybe<SortOrderEnum>;
};

type BannerJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BannerJsonEdge>;
  readonly group: ReadonlyArray<BannerJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<BannerJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BannerJsonConnection_distinctArgs = {
  field: BannerJsonFieldSelector;
};


type BannerJsonConnection_groupArgs = {
  field: BannerJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BannerJsonConnection_maxArgs = {
  field: BannerJsonFieldSelector;
};


type BannerJsonConnection_minArgs = {
  field: BannerJsonFieldSelector;
};


type BannerJsonConnection_sumArgs = {
  field: BannerJsonFieldSelector;
};

type BannerJsonEdge = {
  readonly next: Maybe<BannerJson>;
  readonly node: BannerJson;
  readonly previous: Maybe<BannerJson>;
};

type BannerJsonFieldSelector = {
  readonly absoluteImage: InputMaybe<FieldSelectorEnum>;
  readonly allButton: InputMaybe<BannerJsonAllButtonFieldSelector>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly help: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mainImage: InputMaybe<FieldSelectorEnum>;
  readonly mainTitle: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly phoneNum: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type BannerJsonFilterInput = {
  readonly absoluteImage: InputMaybe<StringQueryOperatorInput>;
  readonly allButton: InputMaybe<BannerJsonAllButtonFilterListInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly help: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mainImage: InputMaybe<StringQueryOperatorInput>;
  readonly mainTitle: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly phoneNum: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type BannerJsonFilterListInput = {
  readonly elemMatch: InputMaybe<BannerJsonFilterInput>;
};

type BannerJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BannerJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<BannerJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<BannerJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BannerJsonGroupConnection_distinctArgs = {
  field: BannerJsonFieldSelector;
};


type BannerJsonGroupConnection_groupArgs = {
  field: BannerJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BannerJsonGroupConnection_maxArgs = {
  field: BannerJsonFieldSelector;
};


type BannerJsonGroupConnection_minArgs = {
  field: BannerJsonFieldSelector;
};


type BannerJsonGroupConnection_sumArgs = {
  field: BannerJsonFieldSelector;
};

type BannerJsonSortInput = {
  readonly absoluteImage: InputMaybe<SortOrderEnum>;
  readonly allButton: InputMaybe<BannerJsonAllButtonSortInput>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly help: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mainImage: InputMaybe<SortOrderEnum>;
  readonly mainTitle: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly phoneNum: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type ContactJson = Node & {
  readonly button: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contactUs: Maybe<ReadonlyArray<Maybe<ContactJsonContactUs>>>;
  readonly desc: Maybe<Scalars['String']>;
  readonly formInputs: Maybe<ReadonlyArray<Maybe<ContactJsonFormInputs>>>;
  readonly formTextArea: Maybe<ContactJsonFormTextArea>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mainTitle: Maybe<Scalars['String']>;
  readonly news: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly submitButton: Maybe<ContactJsonSubmitButton>;
  readonly title: Maybe<Scalars['String']>;
};

type ContactJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContactJsonEdge>;
  readonly group: ReadonlyArray<ContactJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContactJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContactJsonConnection_distinctArgs = {
  field: ContactJsonFieldSelector;
};


type ContactJsonConnection_groupArgs = {
  field: ContactJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContactJsonConnection_maxArgs = {
  field: ContactJsonFieldSelector;
};


type ContactJsonConnection_minArgs = {
  field: ContactJsonFieldSelector;
};


type ContactJsonConnection_sumArgs = {
  field: ContactJsonFieldSelector;
};

type ContactJsonContactUs = {
  readonly icon: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
};

type ContactJsonContactUsFieldSelector = {
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
};

type ContactJsonContactUsFilterInput = {
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
};

type ContactJsonContactUsFilterListInput = {
  readonly elemMatch: InputMaybe<ContactJsonContactUsFilterInput>;
};

type ContactJsonContactUsSortInput = {
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
};

type ContactJsonEdge = {
  readonly next: Maybe<ContactJson>;
  readonly node: ContactJson;
  readonly previous: Maybe<ContactJson>;
};

type ContactJsonFieldSelector = {
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contactUs: InputMaybe<ContactJsonContactUsFieldSelector>;
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly formInputs: InputMaybe<ContactJsonFormInputsFieldSelector>;
  readonly formTextArea: InputMaybe<ContactJsonFormTextAreaFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mainTitle: InputMaybe<FieldSelectorEnum>;
  readonly news: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly submitButton: InputMaybe<ContactJsonSubmitButtonFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type ContactJsonFilterInput = {
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contactUs: InputMaybe<ContactJsonContactUsFilterListInput>;
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly formInputs: InputMaybe<ContactJsonFormListInputsFilterInput>;
  readonly formTextArea: InputMaybe<ContactJsonFormTextAreaFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mainTitle: InputMaybe<StringQueryOperatorInput>;
  readonly news: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly submitButton: InputMaybe<ContactJsonSubmitButtonFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type ContactJsonFilterListInput = {
  readonly elemMatch: InputMaybe<ContactJsonFilterInput>;
};

type ContactJsonFormInputs = {
  readonly name: Maybe<Scalars['String']>;
  readonly placeholder: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContactJsonFormInputsFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly placeholder: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContactJsonFormInputsFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly placeholder: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContactJsonFormInputsSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly placeholder: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContactJsonFormListInputsFilterInput = {
  readonly elemMatch: InputMaybe<ContactJsonFormInputsFilterInput>;
};

type ContactJsonFormTextArea = {
  readonly name: Maybe<Scalars['String']>;
  readonly placeholder: Maybe<Scalars['String']>;
};

type ContactJsonFormTextAreaFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly placeholder: InputMaybe<FieldSelectorEnum>;
};

type ContactJsonFormTextAreaFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly placeholder: InputMaybe<StringQueryOperatorInput>;
};

type ContactJsonFormTextAreaSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly placeholder: InputMaybe<SortOrderEnum>;
};

type ContactJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContactJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContactJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContactJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContactJsonGroupConnection_distinctArgs = {
  field: ContactJsonFieldSelector;
};


type ContactJsonGroupConnection_groupArgs = {
  field: ContactJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContactJsonGroupConnection_maxArgs = {
  field: ContactJsonFieldSelector;
};


type ContactJsonGroupConnection_minArgs = {
  field: ContactJsonFieldSelector;
};


type ContactJsonGroupConnection_sumArgs = {
  field: ContactJsonFieldSelector;
};

type ContactJsonSortInput = {
  readonly button: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contactUs: InputMaybe<ContactJsonContactUsSortInput>;
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly formInputs: InputMaybe<ContactJsonFormInputsSortInput>;
  readonly formTextArea: InputMaybe<ContactJsonFormTextAreaSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mainTitle: InputMaybe<SortOrderEnum>;
  readonly news: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly submitButton: InputMaybe<ContactJsonSubmitButtonSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type ContactJsonSubmitButton = {
  readonly text: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContactJsonSubmitButtonFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContactJsonSubmitButtonFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContactJsonSubmitButtonSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type CourseplanJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly filters: Maybe<ReadonlyArray<Maybe<CourseplanJsonFilters>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly pageTitle: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly tableData: Maybe<ReadonlyArray<Maybe<CourseplanJsonTableData>>>;
  readonly tableHeaders: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

type CourseplanJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CourseplanJsonEdge>;
  readonly group: ReadonlyArray<CourseplanJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<CourseplanJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CourseplanJsonConnection_distinctArgs = {
  field: CourseplanJsonFieldSelector;
};


type CourseplanJsonConnection_groupArgs = {
  field: CourseplanJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CourseplanJsonConnection_maxArgs = {
  field: CourseplanJsonFieldSelector;
};


type CourseplanJsonConnection_minArgs = {
  field: CourseplanJsonFieldSelector;
};


type CourseplanJsonConnection_sumArgs = {
  field: CourseplanJsonFieldSelector;
};

type CourseplanJsonEdge = {
  readonly next: Maybe<CourseplanJson>;
  readonly node: CourseplanJson;
  readonly previous: Maybe<CourseplanJson>;
};

type CourseplanJsonFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly filters: InputMaybe<CourseplanJsonFiltersFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly pageTitle: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableData: InputMaybe<CourseplanJsonTableDataFieldSelector>;
  readonly tableHeaders: InputMaybe<FieldSelectorEnum>;
};

type CourseplanJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly filters: InputMaybe<CourseplanJsonFiltersFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly pageTitle: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableData: InputMaybe<CourseplanJsonTableDataFilterListInput>;
  readonly tableHeaders: InputMaybe<StringQueryOperatorInput>;
};

type CourseplanJsonFilterListInput = {
  readonly elemMatch: InputMaybe<CourseplanJsonFilterInput>;
};

type CourseplanJsonFilters = {
  readonly name: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type CourseplanJsonFiltersFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type CourseplanJsonFiltersFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type CourseplanJsonFiltersFilterListInput = {
  readonly elemMatch: InputMaybe<CourseplanJsonFiltersFilterInput>;
};

type CourseplanJsonFiltersSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type CourseplanJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CourseplanJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<CourseplanJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<CourseplanJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CourseplanJsonGroupConnection_distinctArgs = {
  field: CourseplanJsonFieldSelector;
};


type CourseplanJsonGroupConnection_groupArgs = {
  field: CourseplanJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CourseplanJsonGroupConnection_maxArgs = {
  field: CourseplanJsonFieldSelector;
};


type CourseplanJsonGroupConnection_minArgs = {
  field: CourseplanJsonFieldSelector;
};


type CourseplanJsonGroupConnection_sumArgs = {
  field: CourseplanJsonFieldSelector;
};

type CourseplanJsonSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly filters: InputMaybe<CourseplanJsonFiltersSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly pageTitle: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableData: InputMaybe<CourseplanJsonTableDataSortInput>;
  readonly tableHeaders: InputMaybe<SortOrderEnum>;
};

type CourseplanJsonTableData = {
  readonly schedule: Maybe<ReadonlyArray<Maybe<CourseplanJsonTableDataSchedule>>>;
  readonly time: Maybe<Scalars['String']>;
};

type CourseplanJsonTableDataFieldSelector = {
  readonly schedule: InputMaybe<CourseplanJsonTableDataScheduleFieldSelector>;
  readonly time: InputMaybe<FieldSelectorEnum>;
};

type CourseplanJsonTableDataFilterInput = {
  readonly schedule: InputMaybe<CourseplanJsonTableDataScheduleFilterListInput>;
  readonly time: InputMaybe<StringQueryOperatorInput>;
};

type CourseplanJsonTableDataFilterListInput = {
  readonly elemMatch: InputMaybe<CourseplanJsonTableDataFilterInput>;
};

type CourseplanJsonTableDataSchedule = {
  readonly className: Maybe<Scalars['String']>;
  readonly day: Maybe<Scalars['String']>;
  readonly timeRange: Maybe<Scalars['String']>;
  readonly tsmeta: Maybe<Scalars['String']>;
};

type CourseplanJsonTableDataScheduleFieldSelector = {
  readonly className: InputMaybe<FieldSelectorEnum>;
  readonly day: InputMaybe<FieldSelectorEnum>;
  readonly timeRange: InputMaybe<FieldSelectorEnum>;
  readonly tsmeta: InputMaybe<FieldSelectorEnum>;
};

type CourseplanJsonTableDataScheduleFilterInput = {
  readonly className: InputMaybe<StringQueryOperatorInput>;
  readonly day: InputMaybe<StringQueryOperatorInput>;
  readonly timeRange: InputMaybe<StringQueryOperatorInput>;
  readonly tsmeta: InputMaybe<StringQueryOperatorInput>;
};

type CourseplanJsonTableDataScheduleFilterListInput = {
  readonly elemMatch: InputMaybe<CourseplanJsonTableDataScheduleFilterInput>;
};

type CourseplanJsonTableDataScheduleSortInput = {
  readonly className: InputMaybe<SortOrderEnum>;
  readonly day: InputMaybe<SortOrderEnum>;
  readonly timeRange: InputMaybe<SortOrderEnum>;
  readonly tsmeta: InputMaybe<SortOrderEnum>;
};

type CourseplanJsonTableDataSortInput = {
  readonly schedule: InputMaybe<CourseplanJsonTableDataScheduleSortInput>;
  readonly time: InputMaybe<SortOrderEnum>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type AboutJson or null if there are no children of given type on this node */
  readonly childAboutJson: Maybe<AboutJson>;
  /** Returns the first child node of type BannerJson or null if there are no children of given type on this node */
  readonly childBannerJson: Maybe<BannerJson>;
  /** Returns the first child node of type ContactJson or null if there are no children of given type on this node */
  readonly childContactJson: Maybe<ContactJson>;
  /** Returns the first child node of type CourseplanJson or null if there are no children of given type on this node */
  readonly childCourseplanJson: Maybe<CourseplanJson>;
  /** Returns the first child node of type FooterJson or null if there are no children of given type on this node */
  readonly childFooterJson: Maybe<FooterJson>;
  /** Returns the first child node of type GalleryJson or null if there are no children of given type on this node */
  readonly childGalleryJson: Maybe<GalleryJson>;
  /** Returns the first child node of type HeaderJson or null if there are no children of given type on this node */
  readonly childHeaderJson: Maybe<HeaderJson>;
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type ServiceJson or null if there are no children of given type on this node */
  readonly childServiceJson: Maybe<ServiceJson>;
  /** Returns the first child node of type TeamJson or null if there are no children of given type on this node */
  readonly childTeamJson: Maybe<TeamJson>;
  /** Returns the first child node of type VideoJson or null if there are no children of given type on this node */
  readonly childVideoJson: Maybe<VideoJson>;
  /** Returns the first child node of type WhyweJson or null if there are no children of given type on this node */
  readonly childWhyweJson: Maybe<WhyweJson>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type AboutJson */
  readonly childrenAboutJson: Maybe<ReadonlyArray<Maybe<AboutJson>>>;
  /** Returns all children nodes filtered by type BannerJson */
  readonly childrenBannerJson: Maybe<ReadonlyArray<Maybe<BannerJson>>>;
  /** Returns all children nodes filtered by type ContactJson */
  readonly childrenContactJson: Maybe<ReadonlyArray<Maybe<ContactJson>>>;
  /** Returns all children nodes filtered by type CourseplanJson */
  readonly childrenCourseplanJson: Maybe<ReadonlyArray<Maybe<CourseplanJson>>>;
  /** Returns all children nodes filtered by type FooterJson */
  readonly childrenFooterJson: Maybe<ReadonlyArray<Maybe<FooterJson>>>;
  /** Returns all children nodes filtered by type GalleryJson */
  readonly childrenGalleryJson: Maybe<ReadonlyArray<Maybe<GalleryJson>>>;
  /** Returns all children nodes filtered by type HeaderJson */
  readonly childrenHeaderJson: Maybe<ReadonlyArray<Maybe<HeaderJson>>>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type ServiceJson */
  readonly childrenServiceJson: Maybe<ReadonlyArray<Maybe<ServiceJson>>>;
  /** Returns all children nodes filtered by type TeamJson */
  readonly childrenTeamJson: Maybe<ReadonlyArray<Maybe<TeamJson>>>;
  /** Returns all children nodes filtered by type VideoJson */
  readonly childrenVideoJson: Maybe<ReadonlyArray<Maybe<VideoJson>>>;
  /** Returns all children nodes filtered by type WhyweJson */
  readonly childrenWhyweJson: Maybe<ReadonlyArray<Maybe<WhyweJson>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childAboutJson: InputMaybe<AboutJsonFieldSelector>;
  readonly childBannerJson: InputMaybe<BannerJsonFieldSelector>;
  readonly childContactJson: InputMaybe<ContactJsonFieldSelector>;
  readonly childCourseplanJson: InputMaybe<CourseplanJsonFieldSelector>;
  readonly childFooterJson: InputMaybe<FooterJsonFieldSelector>;
  readonly childGalleryJson: InputMaybe<GalleryJsonFieldSelector>;
  readonly childHeaderJson: InputMaybe<HeaderJsonFieldSelector>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childServiceJson: InputMaybe<ServiceJsonFieldSelector>;
  readonly childTeamJson: InputMaybe<TeamJsonFieldSelector>;
  readonly childVideoJson: InputMaybe<VideoJsonFieldSelector>;
  readonly childWhyweJson: InputMaybe<WhyweJsonFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenAboutJson: InputMaybe<AboutJsonFieldSelector>;
  readonly childrenBannerJson: InputMaybe<BannerJsonFieldSelector>;
  readonly childrenContactJson: InputMaybe<ContactJsonFieldSelector>;
  readonly childrenCourseplanJson: InputMaybe<CourseplanJsonFieldSelector>;
  readonly childrenFooterJson: InputMaybe<FooterJsonFieldSelector>;
  readonly childrenGalleryJson: InputMaybe<GalleryJsonFieldSelector>;
  readonly childrenHeaderJson: InputMaybe<HeaderJsonFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly childrenServiceJson: InputMaybe<ServiceJsonFieldSelector>;
  readonly childrenTeamJson: InputMaybe<TeamJsonFieldSelector>;
  readonly childrenVideoJson: InputMaybe<VideoJsonFieldSelector>;
  readonly childrenWhyweJson: InputMaybe<WhyweJsonFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childAboutJson: InputMaybe<AboutJsonFilterInput>;
  readonly childBannerJson: InputMaybe<BannerJsonFilterInput>;
  readonly childContactJson: InputMaybe<ContactJsonFilterInput>;
  readonly childCourseplanJson: InputMaybe<CourseplanJsonFilterInput>;
  readonly childFooterJson: InputMaybe<FooterJsonFilterInput>;
  readonly childGalleryJson: InputMaybe<GalleryJsonFilterInput>;
  readonly childHeaderJson: InputMaybe<HeaderJsonFilterInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childServiceJson: InputMaybe<ServiceJsonFilterInput>;
  readonly childTeamJson: InputMaybe<TeamJsonFilterInput>;
  readonly childVideoJson: InputMaybe<VideoJsonFilterInput>;
  readonly childWhyweJson: InputMaybe<WhyweJsonFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenAboutJson: InputMaybe<AboutJsonFilterListInput>;
  readonly childrenBannerJson: InputMaybe<BannerJsonFilterListInput>;
  readonly childrenContactJson: InputMaybe<ContactJsonFilterListInput>;
  readonly childrenCourseplanJson: InputMaybe<CourseplanJsonFilterListInput>;
  readonly childrenFooterJson: InputMaybe<FooterJsonFilterListInput>;
  readonly childrenGalleryJson: InputMaybe<GalleryJsonFilterListInput>;
  readonly childrenHeaderJson: InputMaybe<HeaderJsonFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenServiceJson: InputMaybe<ServiceJsonFilterListInput>;
  readonly childrenTeamJson: InputMaybe<TeamJsonFilterListInput>;
  readonly childrenVideoJson: InputMaybe<VideoJsonFilterListInput>;
  readonly childrenWhyweJson: InputMaybe<WhyweJsonFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childAboutJson: InputMaybe<AboutJsonSortInput>;
  readonly childBannerJson: InputMaybe<BannerJsonSortInput>;
  readonly childContactJson: InputMaybe<ContactJsonSortInput>;
  readonly childCourseplanJson: InputMaybe<CourseplanJsonSortInput>;
  readonly childFooterJson: InputMaybe<FooterJsonSortInput>;
  readonly childGalleryJson: InputMaybe<GalleryJsonSortInput>;
  readonly childHeaderJson: InputMaybe<HeaderJsonSortInput>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childServiceJson: InputMaybe<ServiceJsonSortInput>;
  readonly childTeamJson: InputMaybe<TeamJsonSortInput>;
  readonly childVideoJson: InputMaybe<VideoJsonSortInput>;
  readonly childWhyweJson: InputMaybe<WhyweJsonSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenAboutJson: InputMaybe<AboutJsonSortInput>;
  readonly childrenBannerJson: InputMaybe<BannerJsonSortInput>;
  readonly childrenContactJson: InputMaybe<ContactJsonSortInput>;
  readonly childrenCourseplanJson: InputMaybe<CourseplanJsonSortInput>;
  readonly childrenFooterJson: InputMaybe<FooterJsonSortInput>;
  readonly childrenGalleryJson: InputMaybe<GalleryJsonSortInput>;
  readonly childrenHeaderJson: InputMaybe<HeaderJsonSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly childrenServiceJson: InputMaybe<ServiceJsonSortInput>;
  readonly childrenTeamJson: InputMaybe<TeamJsonSortInput>;
  readonly childrenVideoJson: InputMaybe<VideoJsonSortInput>;
  readonly childrenWhyweJson: InputMaybe<WhyweJsonSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type FooterJson = Node & {
  readonly NewsletterHeading: Maybe<Scalars['String']>;
  readonly UsefulHeading: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contactDetails: Maybe<ReadonlyArray<Maybe<FooterJsonContactDetails>>>;
  readonly contactUs: Maybe<Scalars['String']>;
  readonly contactWidget: Maybe<Scalars['String']>;
  readonly copyrightText: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly footerMenuLinks: Maybe<ReadonlyArray<Maybe<FooterJsonFooterMenuLinks>>>;
  readonly gymee: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly logo: Maybe<Scalars['String']>;
  readonly newsletterWidget: Maybe<FooterJsonNewsletterWidget>;
  readonly parent: Maybe<Node>;
  readonly socialIcons: Maybe<ReadonlyArray<Maybe<FooterJsonSocialIcons>>>;
  readonly text: Maybe<Scalars['String']>;
  readonly usefulLinksWidget: Maybe<FooterJsonUsefulLinksWidget>;
};

type FooterJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FooterJsonEdge>;
  readonly group: ReadonlyArray<FooterJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<FooterJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FooterJsonConnection_distinctArgs = {
  field: FooterJsonFieldSelector;
};


type FooterJsonConnection_groupArgs = {
  field: FooterJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FooterJsonConnection_maxArgs = {
  field: FooterJsonFieldSelector;
};


type FooterJsonConnection_minArgs = {
  field: FooterJsonFieldSelector;
};


type FooterJsonConnection_sumArgs = {
  field: FooterJsonFieldSelector;
};

type FooterJsonContactDetails = {
  readonly icon: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
};

type FooterJsonContactDetailsFieldSelector = {
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type FooterJsonContactDetailsFilterInput = {
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type FooterJsonContactDetailsFilterListInput = {
  readonly elemMatch: InputMaybe<FooterJsonContactDetailsFilterInput>;
};

type FooterJsonContactDetailsSortInput = {
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type FooterJsonEdge = {
  readonly next: Maybe<FooterJson>;
  readonly node: FooterJson;
  readonly previous: Maybe<FooterJson>;
};

type FooterJsonFieldSelector = {
  readonly NewsletterHeading: InputMaybe<FieldSelectorEnum>;
  readonly UsefulHeading: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contactDetails: InputMaybe<FooterJsonContactDetailsFieldSelector>;
  readonly contactUs: InputMaybe<FieldSelectorEnum>;
  readonly contactWidget: InputMaybe<FieldSelectorEnum>;
  readonly copyrightText: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly footerMenuLinks: InputMaybe<FooterJsonFooterMenuLinksFieldSelector>;
  readonly gymee: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly logo: InputMaybe<FieldSelectorEnum>;
  readonly newsletterWidget: InputMaybe<FooterJsonNewsletterWidgetFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly socialIcons: InputMaybe<FooterJsonSocialIconsFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
  readonly usefulLinksWidget: InputMaybe<FooterJsonUsefulLinksWidgetFieldSelector>;
};

type FooterJsonFilterInput = {
  readonly NewsletterHeading: InputMaybe<StringQueryOperatorInput>;
  readonly UsefulHeading: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contactDetails: InputMaybe<FooterJsonContactDetailsFilterListInput>;
  readonly contactUs: InputMaybe<StringQueryOperatorInput>;
  readonly contactWidget: InputMaybe<StringQueryOperatorInput>;
  readonly copyrightText: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly footerMenuLinks: InputMaybe<FooterJsonFooterMenuLinksFilterListInput>;
  readonly gymee: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly logo: InputMaybe<StringQueryOperatorInput>;
  readonly newsletterWidget: InputMaybe<FooterJsonNewsletterWidgetFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly socialIcons: InputMaybe<FooterJsonSocialIconsFilterListInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly usefulLinksWidget: InputMaybe<FooterJsonUsefulLinksWidgetFilterInput>;
};

type FooterJsonFilterListInput = {
  readonly elemMatch: InputMaybe<FooterJsonFilterInput>;
};

type FooterJsonFooterMenuLinks = {
  readonly label: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type FooterJsonFooterMenuLinksFieldSelector = {
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FooterJsonFooterMenuLinksFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FooterJsonFooterMenuLinksFilterListInput = {
  readonly elemMatch: InputMaybe<FooterJsonFooterMenuLinksFilterInput>;
};

type FooterJsonFooterMenuLinksSortInput = {
  readonly label: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FooterJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FooterJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FooterJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<FooterJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FooterJsonGroupConnection_distinctArgs = {
  field: FooterJsonFieldSelector;
};


type FooterJsonGroupConnection_groupArgs = {
  field: FooterJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FooterJsonGroupConnection_maxArgs = {
  field: FooterJsonFieldSelector;
};


type FooterJsonGroupConnection_minArgs = {
  field: FooterJsonFieldSelector;
};


type FooterJsonGroupConnection_sumArgs = {
  field: FooterJsonFieldSelector;
};

type FooterJsonNewsletterWidget = {
  readonly description: Maybe<Scalars['String']>;
  readonly formPlaceholder: Maybe<Scalars['String']>;
  readonly subscribeButton: Maybe<Scalars['String']>;
};

type FooterJsonNewsletterWidgetFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly formPlaceholder: InputMaybe<FieldSelectorEnum>;
  readonly subscribeButton: InputMaybe<FieldSelectorEnum>;
};

type FooterJsonNewsletterWidgetFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly formPlaceholder: InputMaybe<StringQueryOperatorInput>;
  readonly subscribeButton: InputMaybe<StringQueryOperatorInput>;
};

type FooterJsonNewsletterWidgetSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly formPlaceholder: InputMaybe<SortOrderEnum>;
  readonly subscribeButton: InputMaybe<SortOrderEnum>;
};

type FooterJsonSocialIcons = {
  readonly icon: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
};

type FooterJsonSocialIconsFieldSelector = {
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
};

type FooterJsonSocialIconsFilterInput = {
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
};

type FooterJsonSocialIconsFilterListInput = {
  readonly elemMatch: InputMaybe<FooterJsonSocialIconsFilterInput>;
};

type FooterJsonSocialIconsSortInput = {
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
};

type FooterJsonSortInput = {
  readonly NewsletterHeading: InputMaybe<SortOrderEnum>;
  readonly UsefulHeading: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contactDetails: InputMaybe<FooterJsonContactDetailsSortInput>;
  readonly contactUs: InputMaybe<SortOrderEnum>;
  readonly contactWidget: InputMaybe<SortOrderEnum>;
  readonly copyrightText: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly footerMenuLinks: InputMaybe<FooterJsonFooterMenuLinksSortInput>;
  readonly gymee: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly logo: InputMaybe<SortOrderEnum>;
  readonly newsletterWidget: InputMaybe<FooterJsonNewsletterWidgetSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly socialIcons: InputMaybe<FooterJsonSocialIconsSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
  readonly usefulLinksWidget: InputMaybe<FooterJsonUsefulLinksWidgetSortInput>;
};

type FooterJsonUsefulLinksWidget = {
  readonly links: Maybe<ReadonlyArray<Maybe<FooterJsonUsefulLinksWidgetLinks>>>;
};

type FooterJsonUsefulLinksWidgetFieldSelector = {
  readonly links: InputMaybe<FooterJsonUsefulLinksWidgetLinksFieldSelector>;
};

type FooterJsonUsefulLinksWidgetFilterInput = {
  readonly links: InputMaybe<FooterJsonUsefulLinksWidgetLinksFilterListInput>;
};

type FooterJsonUsefulLinksWidgetLinks = {
  readonly label: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type FooterJsonUsefulLinksWidgetLinksFieldSelector = {
  readonly label: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FooterJsonUsefulLinksWidgetLinksFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FooterJsonUsefulLinksWidgetLinksFilterListInput = {
  readonly elemMatch: InputMaybe<FooterJsonUsefulLinksWidgetLinksFilterInput>;
};

type FooterJsonUsefulLinksWidgetLinksSortInput = {
  readonly label: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FooterJsonUsefulLinksWidgetSortInput = {
  readonly links: InputMaybe<FooterJsonUsefulLinksWidgetLinksSortInput>;
};

type GalleryJson = Node & {
  readonly button: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly gallery: Maybe<ReadonlyArray<Maybe<GalleryJsonGallery>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly lernmoreIcon: Maybe<Scalars['String']>;
  readonly mainTitle: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type GalleryJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GalleryJsonEdge>;
  readonly group: ReadonlyArray<GalleryJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GalleryJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GalleryJsonConnection_distinctArgs = {
  field: GalleryJsonFieldSelector;
};


type GalleryJsonConnection_groupArgs = {
  field: GalleryJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GalleryJsonConnection_maxArgs = {
  field: GalleryJsonFieldSelector;
};


type GalleryJsonConnection_minArgs = {
  field: GalleryJsonFieldSelector;
};


type GalleryJsonConnection_sumArgs = {
  field: GalleryJsonFieldSelector;
};

type GalleryJsonEdge = {
  readonly next: Maybe<GalleryJson>;
  readonly node: GalleryJson;
  readonly previous: Maybe<GalleryJson>;
};

type GalleryJsonFieldSelector = {
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly gallery: InputMaybe<GalleryJsonGalleryFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lernmoreIcon: InputMaybe<FieldSelectorEnum>;
  readonly mainTitle: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type GalleryJsonFilterInput = {
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly gallery: InputMaybe<GalleryJsonGalleryFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lernmoreIcon: InputMaybe<StringQueryOperatorInput>;
  readonly mainTitle: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type GalleryJsonFilterListInput = {
  readonly elemMatch: InputMaybe<GalleryJsonFilterInput>;
};

type GalleryJsonGallery = {
  readonly desc: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type GalleryJsonGalleryFieldSelector = {
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type GalleryJsonGalleryFilterInput = {
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type GalleryJsonGalleryFilterListInput = {
  readonly elemMatch: InputMaybe<GalleryJsonGalleryFilterInput>;
};

type GalleryJsonGallerySortInput = {
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type GalleryJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GalleryJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GalleryJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GalleryJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GalleryJsonGroupConnection_distinctArgs = {
  field: GalleryJsonFieldSelector;
};


type GalleryJsonGroupConnection_groupArgs = {
  field: GalleryJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GalleryJsonGroupConnection_maxArgs = {
  field: GalleryJsonFieldSelector;
};


type GalleryJsonGroupConnection_minArgs = {
  field: GalleryJsonFieldSelector;
};


type GalleryJsonGroupConnection_sumArgs = {
  field: GalleryJsonFieldSelector;
};

type GalleryJsonSortInput = {
  readonly button: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly gallery: InputMaybe<GalleryJsonGallerySortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lernmoreIcon: InputMaybe<SortOrderEnum>;
  readonly mainTitle: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type HeaderJson = Node & {
  readonly buttonName: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly contact: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly navbar: Maybe<HeaderJsonNavbar>;
  readonly parent: Maybe<Node>;
  readonly phone: Maybe<Scalars['String']>;
};

type HeaderJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HeaderJsonEdge>;
  readonly group: ReadonlyArray<HeaderJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HeaderJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HeaderJsonConnection_distinctArgs = {
  field: HeaderJsonFieldSelector;
};


type HeaderJsonConnection_groupArgs = {
  field: HeaderJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HeaderJsonConnection_maxArgs = {
  field: HeaderJsonFieldSelector;
};


type HeaderJsonConnection_minArgs = {
  field: HeaderJsonFieldSelector;
};


type HeaderJsonConnection_sumArgs = {
  field: HeaderJsonFieldSelector;
};

type HeaderJsonEdge = {
  readonly next: Maybe<HeaderJson>;
  readonly node: HeaderJson;
  readonly previous: Maybe<HeaderJson>;
};

type HeaderJsonFieldSelector = {
  readonly buttonName: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contact: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly navbar: InputMaybe<HeaderJsonNavbarFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly phone: InputMaybe<FieldSelectorEnum>;
};

type HeaderJsonFilterInput = {
  readonly buttonName: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contact: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly navbar: InputMaybe<HeaderJsonNavbarFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly phone: InputMaybe<StringQueryOperatorInput>;
};

type HeaderJsonFilterListInput = {
  readonly elemMatch: InputMaybe<HeaderJsonFilterInput>;
};

type HeaderJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<HeaderJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<HeaderJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<HeaderJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type HeaderJsonGroupConnection_distinctArgs = {
  field: HeaderJsonFieldSelector;
};


type HeaderJsonGroupConnection_groupArgs = {
  field: HeaderJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type HeaderJsonGroupConnection_maxArgs = {
  field: HeaderJsonFieldSelector;
};


type HeaderJsonGroupConnection_minArgs = {
  field: HeaderJsonFieldSelector;
};


type HeaderJsonGroupConnection_sumArgs = {
  field: HeaderJsonFieldSelector;
};

type HeaderJsonNavbar = {
  readonly links: Maybe<ReadonlyArray<Maybe<HeaderJsonNavbarLinks>>>;
};

type HeaderJsonNavbarFieldSelector = {
  readonly links: InputMaybe<HeaderJsonNavbarLinksFieldSelector>;
};

type HeaderJsonNavbarFilterInput = {
  readonly links: InputMaybe<HeaderJsonNavbarLinksFilterListInput>;
};

type HeaderJsonNavbarLinks = {
  readonly linkName: Maybe<Scalars['String']>;
  readonly linkURL: Maybe<Scalars['String']>;
};

type HeaderJsonNavbarLinksFieldSelector = {
  readonly linkName: InputMaybe<FieldSelectorEnum>;
  readonly linkURL: InputMaybe<FieldSelectorEnum>;
};

type HeaderJsonNavbarLinksFilterInput = {
  readonly linkName: InputMaybe<StringQueryOperatorInput>;
  readonly linkURL: InputMaybe<StringQueryOperatorInput>;
};

type HeaderJsonNavbarLinksFilterListInput = {
  readonly elemMatch: InputMaybe<HeaderJsonNavbarLinksFilterInput>;
};

type HeaderJsonNavbarLinksSortInput = {
  readonly linkName: InputMaybe<SortOrderEnum>;
  readonly linkURL: InputMaybe<SortOrderEnum>;
};

type HeaderJsonNavbarSortInput = {
  readonly links: InputMaybe<HeaderJsonNavbarLinksSortInput>;
};

type HeaderJsonSortInput = {
  readonly buttonName: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contact: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly navbar: InputMaybe<HeaderJsonNavbarSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly phone: InputMaybe<SortOrderEnum>;
};

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly aboutJson: Maybe<AboutJson>;
  readonly allAboutJson: AboutJsonConnection;
  readonly allBannerJson: BannerJsonConnection;
  readonly allContactJson: ContactJsonConnection;
  readonly allCourseplanJson: CourseplanJsonConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allFooterJson: FooterJsonConnection;
  readonly allGalleryJson: GalleryJsonConnection;
  readonly allHeaderJson: HeaderJsonConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allServiceJson: ServiceJsonConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allTeamJson: TeamJsonConnection;
  readonly allVideoJson: VideoJsonConnection;
  readonly allWhyweJson: WhyweJsonConnection;
  readonly bannerJson: Maybe<BannerJson>;
  readonly contactJson: Maybe<ContactJson>;
  readonly courseplanJson: Maybe<CourseplanJson>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly footerJson: Maybe<FooterJson>;
  readonly galleryJson: Maybe<GalleryJson>;
  readonly headerJson: Maybe<HeaderJson>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly serviceJson: Maybe<ServiceJson>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly teamJson: Maybe<TeamJson>;
  readonly videoJson: Maybe<VideoJson>;
  readonly whyweJson: Maybe<WhyweJson>;
};


type Query_aboutJsonArgs = {
  absoluteImage: InputMaybe<StringQueryOperatorInput>;
  allButton: InputMaybe<AboutJsonAllButtonFilterListInput>;
  button: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  desc: InputMaybe<StringQueryOperatorInput>;
  help: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mainImage: InputMaybe<StringQueryOperatorInput>;
  mainTitle: InputMaybe<StringQueryOperatorInput>;
  paragraph: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  phoneNum: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_allAboutJsonArgs = {
  filter: InputMaybe<AboutJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<AboutJsonSortInput>>>;
};


type Query_allBannerJsonArgs = {
  filter: InputMaybe<BannerJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<BannerJsonSortInput>>>;
};


type Query_allContactJsonArgs = {
  filter: InputMaybe<ContactJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContactJsonSortInput>>>;
};


type Query_allCourseplanJsonArgs = {
  filter: InputMaybe<CourseplanJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<CourseplanJsonSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allFooterJsonArgs = {
  filter: InputMaybe<FooterJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FooterJsonSortInput>>>;
};


type Query_allGalleryJsonArgs = {
  filter: InputMaybe<GalleryJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GalleryJsonSortInput>>>;
};


type Query_allHeaderJsonArgs = {
  filter: InputMaybe<HeaderJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<HeaderJsonSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allServiceJsonArgs = {
  filter: InputMaybe<ServiceJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ServiceJsonSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allTeamJsonArgs = {
  filter: InputMaybe<TeamJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<TeamJsonSortInput>>>;
};


type Query_allVideoJsonArgs = {
  filter: InputMaybe<VideoJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<VideoJsonSortInput>>>;
};


type Query_allWhyweJsonArgs = {
  filter: InputMaybe<WhyweJsonFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<WhyweJsonSortInput>>>;
};


type Query_bannerJsonArgs = {
  absoluteImage: InputMaybe<StringQueryOperatorInput>;
  allButton: InputMaybe<BannerJsonAllButtonFilterListInput>;
  button: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  desc: InputMaybe<StringQueryOperatorInput>;
  help: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mainImage: InputMaybe<StringQueryOperatorInput>;
  mainTitle: InputMaybe<StringQueryOperatorInput>;
  paragraph: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  phoneNum: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_contactJsonArgs = {
  button: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contactUs: InputMaybe<ContactJsonContactUsFilterListInput>;
  desc: InputMaybe<StringQueryOperatorInput>;
  formInputs: InputMaybe<ContactJsonFormListInputsFilterInput>;
  formTextArea: InputMaybe<ContactJsonFormTextAreaFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mainTitle: InputMaybe<StringQueryOperatorInput>;
  news: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  submitButton: InputMaybe<ContactJsonSubmitButtonFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_courseplanJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  filters: InputMaybe<CourseplanJsonFiltersFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  pageTitle: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableData: InputMaybe<CourseplanJsonTableDataFilterListInput>;
  tableHeaders: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childAboutJson: InputMaybe<AboutJsonFilterInput>;
  childBannerJson: InputMaybe<BannerJsonFilterInput>;
  childContactJson: InputMaybe<ContactJsonFilterInput>;
  childCourseplanJson: InputMaybe<CourseplanJsonFilterInput>;
  childFooterJson: InputMaybe<FooterJsonFilterInput>;
  childGalleryJson: InputMaybe<GalleryJsonFilterInput>;
  childHeaderJson: InputMaybe<HeaderJsonFilterInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childServiceJson: InputMaybe<ServiceJsonFilterInput>;
  childTeamJson: InputMaybe<TeamJsonFilterInput>;
  childVideoJson: InputMaybe<VideoJsonFilterInput>;
  childWhyweJson: InputMaybe<WhyweJsonFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenAboutJson: InputMaybe<AboutJsonFilterListInput>;
  childrenBannerJson: InputMaybe<BannerJsonFilterListInput>;
  childrenContactJson: InputMaybe<ContactJsonFilterListInput>;
  childrenCourseplanJson: InputMaybe<CourseplanJsonFilterListInput>;
  childrenFooterJson: InputMaybe<FooterJsonFilterListInput>;
  childrenGalleryJson: InputMaybe<GalleryJsonFilterListInput>;
  childrenHeaderJson: InputMaybe<HeaderJsonFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenServiceJson: InputMaybe<ServiceJsonFilterListInput>;
  childrenTeamJson: InputMaybe<TeamJsonFilterListInput>;
  childrenVideoJson: InputMaybe<VideoJsonFilterListInput>;
  childrenWhyweJson: InputMaybe<WhyweJsonFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_footerJsonArgs = {
  NewsletterHeading: InputMaybe<StringQueryOperatorInput>;
  UsefulHeading: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contactDetails: InputMaybe<FooterJsonContactDetailsFilterListInput>;
  contactUs: InputMaybe<StringQueryOperatorInput>;
  contactWidget: InputMaybe<StringQueryOperatorInput>;
  copyrightText: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  footerMenuLinks: InputMaybe<FooterJsonFooterMenuLinksFilterListInput>;
  gymee: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  logo: InputMaybe<StringQueryOperatorInput>;
  newsletterWidget: InputMaybe<FooterJsonNewsletterWidgetFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  socialIcons: InputMaybe<FooterJsonSocialIconsFilterListInput>;
  text: InputMaybe<StringQueryOperatorInput>;
  usefulLinksWidget: InputMaybe<FooterJsonUsefulLinksWidgetFilterInput>;
};


type Query_galleryJsonArgs = {
  button: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  gallery: InputMaybe<GalleryJsonGalleryFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lernmoreIcon: InputMaybe<StringQueryOperatorInput>;
  mainTitle: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_headerJsonArgs = {
  buttonName: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  contact: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  navbar: InputMaybe<HeaderJsonNavbarFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  phone: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_serviceJsonArgs = {
  Swiper: InputMaybe<ServiceJsonSwiperFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sec_title: InputMaybe<StringQueryOperatorInput>;
  sub_title: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_teamJsonArgs = {
  children: InputMaybe<NodeFilterListInput>;
  desc: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  team: InputMaybe<TeamJsonTeamFilterListInput>;
  titleCoaches: InputMaybe<StringQueryOperatorInput>;
  titleFitness: InputMaybe<StringQueryOperatorInput>;
};


type Query_videoJsonArgs = {
  Video: InputMaybe<StringQueryOperatorInput>;
  button: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  desc: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  learnMore: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  playIcon: InputMaybe<StringQueryOperatorInput>;
  spinImage: InputMaybe<StringQueryOperatorInput>;
  title: InputMaybe<VideoJsonTitleFilterInput>;
};


type Query_whyweJsonArgs = {
  absoluteImage: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  desc: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mainImage: InputMaybe<StringQueryOperatorInput>;
  mainTitle: InputMaybe<StringQueryOperatorInput>;
  news: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  whyWe: InputMaybe<WhyweJsonWhyWeFilterListInput>;
};

type ServiceJson = Node & {
  readonly Swiper: Maybe<ReadonlyArray<Maybe<ServiceJsonSwiper>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sec_title: Maybe<Scalars['String']>;
  readonly sub_title: Maybe<Scalars['String']>;
};

type ServiceJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ServiceJsonEdge>;
  readonly group: ReadonlyArray<ServiceJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ServiceJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ServiceJsonConnection_distinctArgs = {
  field: ServiceJsonFieldSelector;
};


type ServiceJsonConnection_groupArgs = {
  field: ServiceJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ServiceJsonConnection_maxArgs = {
  field: ServiceJsonFieldSelector;
};


type ServiceJsonConnection_minArgs = {
  field: ServiceJsonFieldSelector;
};


type ServiceJsonConnection_sumArgs = {
  field: ServiceJsonFieldSelector;
};

type ServiceJsonEdge = {
  readonly next: Maybe<ServiceJson>;
  readonly node: ServiceJson;
  readonly previous: Maybe<ServiceJson>;
};

type ServiceJsonFieldSelector = {
  readonly Swiper: InputMaybe<ServiceJsonSwiperFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sec_title: InputMaybe<FieldSelectorEnum>;
  readonly sub_title: InputMaybe<FieldSelectorEnum>;
};

type ServiceJsonFilterInput = {
  readonly Swiper: InputMaybe<ServiceJsonSwiperFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sec_title: InputMaybe<StringQueryOperatorInput>;
  readonly sub_title: InputMaybe<StringQueryOperatorInput>;
};

type ServiceJsonFilterListInput = {
  readonly elemMatch: InputMaybe<ServiceJsonFilterInput>;
};

type ServiceJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ServiceJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ServiceJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ServiceJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ServiceJsonGroupConnection_distinctArgs = {
  field: ServiceJsonFieldSelector;
};


type ServiceJsonGroupConnection_groupArgs = {
  field: ServiceJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ServiceJsonGroupConnection_maxArgs = {
  field: ServiceJsonFieldSelector;
};


type ServiceJsonGroupConnection_minArgs = {
  field: ServiceJsonFieldSelector;
};


type ServiceJsonGroupConnection_sumArgs = {
  field: ServiceJsonFieldSelector;
};

type ServiceJsonSortInput = {
  readonly Swiper: InputMaybe<ServiceJsonSwiperSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sec_title: InputMaybe<SortOrderEnum>;
  readonly sub_title: InputMaybe<SortOrderEnum>;
};

type ServiceJsonSwiper = {
  readonly dec: Maybe<Scalars['String']>;
  readonly heading: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly text: Maybe<Scalars['String']>;
};

type ServiceJsonSwiperFieldSelector = {
  readonly dec: InputMaybe<FieldSelectorEnum>;
  readonly heading: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type ServiceJsonSwiperFilterInput = {
  readonly dec: InputMaybe<StringQueryOperatorInput>;
  readonly heading: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type ServiceJsonSwiperFilterListInput = {
  readonly elemMatch: InputMaybe<ServiceJsonSwiperFilterInput>;
};

type ServiceJsonSwiperSortInput = {
  readonly dec: InputMaybe<SortOrderEnum>;
  readonly heading: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TeamJson = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly desc: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly team: Maybe<ReadonlyArray<Maybe<TeamJsonTeam>>>;
  readonly titleCoaches: Maybe<Scalars['String']>;
  readonly titleFitness: Maybe<Scalars['String']>;
};

type TeamJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamJsonEdge>;
  readonly group: ReadonlyArray<TeamJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamJsonConnection_distinctArgs = {
  field: TeamJsonFieldSelector;
};


type TeamJsonConnection_groupArgs = {
  field: TeamJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamJsonConnection_maxArgs = {
  field: TeamJsonFieldSelector;
};


type TeamJsonConnection_minArgs = {
  field: TeamJsonFieldSelector;
};


type TeamJsonConnection_sumArgs = {
  field: TeamJsonFieldSelector;
};

type TeamJsonEdge = {
  readonly next: Maybe<TeamJson>;
  readonly node: TeamJson;
  readonly previous: Maybe<TeamJson>;
};

type TeamJsonFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly team: InputMaybe<TeamJsonTeamFieldSelector>;
  readonly titleCoaches: InputMaybe<FieldSelectorEnum>;
  readonly titleFitness: InputMaybe<FieldSelectorEnum>;
};

type TeamJsonFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly team: InputMaybe<TeamJsonTeamFilterListInput>;
  readonly titleCoaches: InputMaybe<StringQueryOperatorInput>;
  readonly titleFitness: InputMaybe<StringQueryOperatorInput>;
};

type TeamJsonFilterListInput = {
  readonly elemMatch: InputMaybe<TeamJsonFilterInput>;
};

type TeamJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<TeamJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamJsonGroupConnection_distinctArgs = {
  field: TeamJsonFieldSelector;
};


type TeamJsonGroupConnection_groupArgs = {
  field: TeamJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamJsonGroupConnection_maxArgs = {
  field: TeamJsonFieldSelector;
};


type TeamJsonGroupConnection_minArgs = {
  field: TeamJsonFieldSelector;
};


type TeamJsonGroupConnection_sumArgs = {
  field: TeamJsonFieldSelector;
};

type TeamJsonSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly team: InputMaybe<TeamJsonTeamSortInput>;
  readonly titleCoaches: InputMaybe<SortOrderEnum>;
  readonly titleFitness: InputMaybe<SortOrderEnum>;
};

type TeamJsonTeam = {
  readonly description: Maybe<Scalars['String']>;
  readonly imageSrc: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly role: Maybe<Scalars['String']>;
  readonly socialLinks: Maybe<ReadonlyArray<Maybe<TeamJsonTeamSocialLinks>>>;
};

type TeamJsonTeamFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly imageSrc: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly role: InputMaybe<FieldSelectorEnum>;
  readonly socialLinks: InputMaybe<TeamJsonTeamSocialLinksFieldSelector>;
};

type TeamJsonTeamFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly imageSrc: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly socialLinks: InputMaybe<TeamJsonTeamSocialLinksFilterListInput>;
};

type TeamJsonTeamFilterListInput = {
  readonly elemMatch: InputMaybe<TeamJsonTeamFilterInput>;
};

type TeamJsonTeamSocialLinks = {
  readonly icon: Maybe<Scalars['String']>;
  readonly link: Maybe<Scalars['String']>;
};

type TeamJsonTeamSocialLinksFieldSelector = {
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<FieldSelectorEnum>;
};

type TeamJsonTeamSocialLinksFilterInput = {
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<StringQueryOperatorInput>;
};

type TeamJsonTeamSocialLinksFilterListInput = {
  readonly elemMatch: InputMaybe<TeamJsonTeamSocialLinksFilterInput>;
};

type TeamJsonTeamSocialLinksSortInput = {
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<SortOrderEnum>;
};

type TeamJsonTeamSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly imageSrc: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly role: InputMaybe<SortOrderEnum>;
  readonly socialLinks: InputMaybe<TeamJsonTeamSocialLinksSortInput>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type VideoJson = Node & {
  readonly Video: Maybe<Scalars['String']>;
  readonly button: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly desc: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly learnMore: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly playIcon: Maybe<Scalars['String']>;
  readonly spinImage: Maybe<Scalars['String']>;
  readonly title: Maybe<VideoJsonTitle>;
};

type VideoJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<VideoJsonEdge>;
  readonly group: ReadonlyArray<VideoJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<VideoJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type VideoJsonConnection_distinctArgs = {
  field: VideoJsonFieldSelector;
};


type VideoJsonConnection_groupArgs = {
  field: VideoJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type VideoJsonConnection_maxArgs = {
  field: VideoJsonFieldSelector;
};


type VideoJsonConnection_minArgs = {
  field: VideoJsonFieldSelector;
};


type VideoJsonConnection_sumArgs = {
  field: VideoJsonFieldSelector;
};

type VideoJsonEdge = {
  readonly next: Maybe<VideoJson>;
  readonly node: VideoJson;
  readonly previous: Maybe<VideoJson>;
};

type VideoJsonFieldSelector = {
  readonly Video: InputMaybe<FieldSelectorEnum>;
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly learnMore: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly playIcon: InputMaybe<FieldSelectorEnum>;
  readonly spinImage: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<VideoJsonTitleFieldSelector>;
};

type VideoJsonFilterInput = {
  readonly Video: InputMaybe<StringQueryOperatorInput>;
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly learnMore: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly playIcon: InputMaybe<StringQueryOperatorInput>;
  readonly spinImage: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<VideoJsonTitleFilterInput>;
};

type VideoJsonFilterListInput = {
  readonly elemMatch: InputMaybe<VideoJsonFilterInput>;
};

type VideoJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<VideoJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<VideoJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<VideoJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type VideoJsonGroupConnection_distinctArgs = {
  field: VideoJsonFieldSelector;
};


type VideoJsonGroupConnection_groupArgs = {
  field: VideoJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type VideoJsonGroupConnection_maxArgs = {
  field: VideoJsonFieldSelector;
};


type VideoJsonGroupConnection_minArgs = {
  field: VideoJsonFieldSelector;
};


type VideoJsonGroupConnection_sumArgs = {
  field: VideoJsonFieldSelector;
};

type VideoJsonSortInput = {
  readonly Video: InputMaybe<SortOrderEnum>;
  readonly button: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly learnMore: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly playIcon: InputMaybe<SortOrderEnum>;
  readonly spinImage: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<VideoJsonTitleSortInput>;
};

type VideoJsonTitle = {
  readonly centerText: Maybe<Scalars['String']>;
  readonly mainText: Maybe<Scalars['String']>;
  readonly prefix: Maybe<Scalars['String']>;
  readonly suffix: Maybe<Scalars['String']>;
};

type VideoJsonTitleFieldSelector = {
  readonly centerText: InputMaybe<FieldSelectorEnum>;
  readonly mainText: InputMaybe<FieldSelectorEnum>;
  readonly prefix: InputMaybe<FieldSelectorEnum>;
  readonly suffix: InputMaybe<FieldSelectorEnum>;
};

type VideoJsonTitleFilterInput = {
  readonly centerText: InputMaybe<StringQueryOperatorInput>;
  readonly mainText: InputMaybe<StringQueryOperatorInput>;
  readonly prefix: InputMaybe<StringQueryOperatorInput>;
  readonly suffix: InputMaybe<StringQueryOperatorInput>;
};

type VideoJsonTitleSortInput = {
  readonly centerText: InputMaybe<SortOrderEnum>;
  readonly mainText: InputMaybe<SortOrderEnum>;
  readonly prefix: InputMaybe<SortOrderEnum>;
  readonly suffix: InputMaybe<SortOrderEnum>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type WhyweJson = Node & {
  readonly absoluteImage: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly desc: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mainImage: Maybe<Scalars['String']>;
  readonly mainTitle: Maybe<Scalars['String']>;
  readonly news: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
  readonly whyWe: Maybe<ReadonlyArray<Maybe<WhyweJsonWhyWe>>>;
};

type WhyweJsonConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<WhyweJsonEdge>;
  readonly group: ReadonlyArray<WhyweJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<WhyweJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type WhyweJsonConnection_distinctArgs = {
  field: WhyweJsonFieldSelector;
};


type WhyweJsonConnection_groupArgs = {
  field: WhyweJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type WhyweJsonConnection_maxArgs = {
  field: WhyweJsonFieldSelector;
};


type WhyweJsonConnection_minArgs = {
  field: WhyweJsonFieldSelector;
};


type WhyweJsonConnection_sumArgs = {
  field: WhyweJsonFieldSelector;
};

type WhyweJsonEdge = {
  readonly next: Maybe<WhyweJson>;
  readonly node: WhyweJson;
  readonly previous: Maybe<WhyweJson>;
};

type WhyweJsonFieldSelector = {
  readonly absoluteImage: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mainImage: InputMaybe<FieldSelectorEnum>;
  readonly mainTitle: InputMaybe<FieldSelectorEnum>;
  readonly news: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly whyWe: InputMaybe<WhyweJsonWhyWeFieldSelector>;
};

type WhyweJsonFilterInput = {
  readonly absoluteImage: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mainImage: InputMaybe<StringQueryOperatorInput>;
  readonly mainTitle: InputMaybe<StringQueryOperatorInput>;
  readonly news: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly whyWe: InputMaybe<WhyweJsonWhyWeFilterListInput>;
};

type WhyweJsonFilterListInput = {
  readonly elemMatch: InputMaybe<WhyweJsonFilterInput>;
};

type WhyweJsonGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<WhyweJsonEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<WhyweJsonGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<WhyweJson>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type WhyweJsonGroupConnection_distinctArgs = {
  field: WhyweJsonFieldSelector;
};


type WhyweJsonGroupConnection_groupArgs = {
  field: WhyweJsonFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type WhyweJsonGroupConnection_maxArgs = {
  field: WhyweJsonFieldSelector;
};


type WhyweJsonGroupConnection_minArgs = {
  field: WhyweJsonFieldSelector;
};


type WhyweJsonGroupConnection_sumArgs = {
  field: WhyweJsonFieldSelector;
};

type WhyweJsonSortInput = {
  readonly absoluteImage: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mainImage: InputMaybe<SortOrderEnum>;
  readonly mainTitle: InputMaybe<SortOrderEnum>;
  readonly news: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly whyWe: InputMaybe<WhyweJsonWhyWeSortInput>;
};

type WhyweJsonWhyWe = {
  readonly accordion: Maybe<Scalars['String']>;
  readonly desc: Maybe<Scalars['String']>;
  readonly iconDown: Maybe<Scalars['String']>;
  readonly iconRight: Maybe<Scalars['String']>;
};

type WhyweJsonWhyWeFieldSelector = {
  readonly accordion: InputMaybe<FieldSelectorEnum>;
  readonly desc: InputMaybe<FieldSelectorEnum>;
  readonly iconDown: InputMaybe<FieldSelectorEnum>;
  readonly iconRight: InputMaybe<FieldSelectorEnum>;
};

type WhyweJsonWhyWeFilterInput = {
  readonly accordion: InputMaybe<StringQueryOperatorInput>;
  readonly desc: InputMaybe<StringQueryOperatorInput>;
  readonly iconDown: InputMaybe<StringQueryOperatorInput>;
  readonly iconRight: InputMaybe<StringQueryOperatorInput>;
};

type WhyweJsonWhyWeFilterListInput = {
  readonly elemMatch: InputMaybe<WhyweJsonWhyWeFilterInput>;
};

type WhyweJsonWhyWeSortInput = {
  readonly accordion: InputMaybe<SortOrderEnum>;
  readonly desc: InputMaybe<SortOrderEnum>;
  readonly iconDown: InputMaybe<SortOrderEnum>;
  readonly iconRight: InputMaybe<SortOrderEnum>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };


}
